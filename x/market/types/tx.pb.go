// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: em/market/v1beta1/tx.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddLimitOrder struct {
	Owner         string      `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ClientOrderId string      `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
	TimeInForce   TimeInForce `protobuf:"varint,3,opt,name=time_in_force,json=timeInForce,proto3,enum=em.market.v1beta1.TimeInForce" json:"time_in_force,omitempty" yaml:"time_in_force"`
	Source        *types.Coin `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty" yaml:"source"`
	Destination   *types.Coin `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty" yaml:"destination"`
}

func (m *MsgAddLimitOrder) Reset()         { *m = MsgAddLimitOrder{} }
func (m *MsgAddLimitOrder) String() string { return proto.CompactTextString(m) }
func (*MsgAddLimitOrder) ProtoMessage()    {}
func (*MsgAddLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba188bf9a23b9aa, []int{0}
}
func (m *MsgAddLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLimitOrder.Merge(m, src)
}
func (m *MsgAddLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLimitOrder proto.InternalMessageInfo

func (m *MsgAddLimitOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddLimitOrder) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

func (m *MsgAddLimitOrder) GetTimeInForce() TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForce_Unspecified
}

func (m *MsgAddLimitOrder) GetSource() *types.Coin {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *MsgAddLimitOrder) GetDestination() *types.Coin {
	if m != nil {
		return m.Destination
	}
	return nil
}

type MsgAddMarketOrder struct {
	Owner         string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ClientOrderId string                                 `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
	TimeInForce   TimeInForce                            `protobuf:"varint,3,opt,name=time_in_force,json=timeInForce,proto3,enum=em.market.v1beta1.TimeInForce" json:"time_in_force,omitempty" yaml:"time_in_force"`
	Source        string                                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty" yaml:"source"`
	Destination   *types.Coin                            `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty" yaml:"destination"`
	MaxSlippage   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=maximum_slippage,json=maximumSlippage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maximum_slippage" yaml:"maximum_slippage"`
}

func (m *MsgAddMarketOrder) Reset()         { *m = MsgAddMarketOrder{} }
func (m *MsgAddMarketOrder) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarketOrder) ProtoMessage()    {}
func (*MsgAddMarketOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba188bf9a23b9aa, []int{1}
}
func (m *MsgAddMarketOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarketOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarketOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarketOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarketOrder.Merge(m, src)
}
func (m *MsgAddMarketOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarketOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarketOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarketOrder proto.InternalMessageInfo

func (m *MsgAddMarketOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddMarketOrder) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

func (m *MsgAddMarketOrder) GetTimeInForce() TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return TimeInForce_Unspecified
}

func (m *MsgAddMarketOrder) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MsgAddMarketOrder) GetDestination() *types.Coin {
	if m != nil {
		return m.Destination
	}
	return nil
}

type MsgCancelOrder struct {
	Owner         string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ClientOrderId string `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty" yaml:"client_order_id"`
}

func (m *MsgCancelOrder) Reset()         { *m = MsgCancelOrder{} }
func (m *MsgCancelOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrder) ProtoMessage()    {}
func (*MsgCancelOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba188bf9a23b9aa, []int{2}
}
func (m *MsgCancelOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrder.Merge(m, src)
}
func (m *MsgCancelOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrder proto.InternalMessageInfo

func (m *MsgCancelOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCancelOrder) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

type MsgCancelReplaceLimitOrder struct {
	Owner             string      `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	OrigClientOrderId string      `protobuf:"bytes,2,opt,name=original_client_order_id,json=originalClientOrderId,proto3" json:"original_client_order_id,omitempty" yaml:"original_client_order_id"`
	NewClientOrderId  string      `protobuf:"bytes,3,opt,name=new_client_order_id,json=newClientOrderId,proto3" json:"new_client_order_id,omitempty" yaml:"new_client_order_id"`
	Source            *types.Coin `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty" yaml:"source"`
	Destination       *types.Coin `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty" yaml:"destination"`
}

func (m *MsgCancelReplaceLimitOrder) Reset()         { *m = MsgCancelReplaceLimitOrder{} }
func (m *MsgCancelReplaceLimitOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelReplaceLimitOrder) ProtoMessage()    {}
func (*MsgCancelReplaceLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba188bf9a23b9aa, []int{3}
}
func (m *MsgCancelReplaceLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelReplaceLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelReplaceLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelReplaceLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelReplaceLimitOrder.Merge(m, src)
}
func (m *MsgCancelReplaceLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelReplaceLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelReplaceLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelReplaceLimitOrder proto.InternalMessageInfo

func (m *MsgCancelReplaceLimitOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCancelReplaceLimitOrder) GetOrigClientOrderId() string {
	if m != nil {
		return m.OrigClientOrderId
	}
	return ""
}

func (m *MsgCancelReplaceLimitOrder) GetNewClientOrderId() string {
	if m != nil {
		return m.NewClientOrderId
	}
	return ""
}

func (m *MsgCancelReplaceLimitOrder) GetSource() *types.Coin {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *MsgCancelReplaceLimitOrder) GetDestination() *types.Coin {
	if m != nil {
		return m.Destination
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgAddLimitOrder)(nil), "em.market.v1beta1.MsgAddLimitOrder")
	proto.RegisterType((*MsgAddMarketOrder)(nil), "em.market.v1beta1.MsgAddMarketOrder")
	proto.RegisterType((*MsgCancelOrder)(nil), "em.market.v1beta1.MsgCancelOrder")
	proto.RegisterType((*MsgCancelReplaceLimitOrder)(nil), "em.market.v1beta1.MsgCancelReplaceLimitOrder")
}

func init() { proto.RegisterFile("em/market/v1beta1/tx.proto", fileDescriptor_2ba188bf9a23b9aa) }

var fileDescriptor_2ba188bf9a23b9aa = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0xcf, 0x6a, 0xd4, 0x4e,
	0x1c, 0xdf, 0x74, 0x7f, 0x2d, 0x74, 0xf6, 0xd7, 0x76, 0x37, 0xd6, 0x1a, 0xf7, 0x90, 0x29, 0x73,
	0x28, 0x15, 0x69, 0x42, 0xeb, 0x45, 0xbc, 0xb9, 0xad, 0x42, 0xc1, 0xb5, 0x90, 0x7a, 0x10, 0x11,
	0x96, 0xd9, 0xe4, 0x6b, 0x1c, 0x9a, 0x99, 0x59, 0x93, 0xa9, 0xdd, 0x82, 0x37, 0x5f, 0xc0, 0x97,
	0xf1, 0x1d, 0x7a, 0xec, 0x51, 0x3c, 0x0c, 0x92, 0x7d, 0x83, 0x5c, 0xbc, 0xca, 0x66, 0xb2, 0x75,
	0xbb, 0xad, 0x08, 0x1e, 0x8a, 0x78, 0x4a, 0x98, 0xcf, 0xbf, 0xc9, 0x27, 0x33, 0x5f, 0xd4, 0x06,
	0xee, 0x73, 0x9a, 0x1e, 0x81, 0xf2, 0xdf, 0x6f, 0xf7, 0x41, 0xd1, 0x6d, 0x5f, 0x0d, 0xbd, 0x41,
	0x2a, 0x95, 0xb4, 0x5b, 0xc0, 0x3d, 0x83, 0x79, 0x15, 0xd6, 0x5e, 0x8d, 0x65, 0x2c, 0x4b, 0xd4,
	0x1f, 0xbf, 0x19, 0x62, 0xdb, 0x0d, 0x65, 0xc6, 0x65, 0xe6, 0xf7, 0x69, 0x06, 0x17, 0x36, 0xa1,
	0x64, 0x62, 0x82, 0x5f, 0x0d, 0xa9, 0x7c, 0x4b, 0x9c, 0x7c, 0x9f, 0x43, 0xcd, 0x6e, 0x16, 0x3f,
	0x8e, 0xa2, 0x67, 0x8c, 0x33, 0x75, 0x90, 0x46, 0x90, 0xda, 0x1b, 0x68, 0x5e, 0x9e, 0x08, 0x48,
	0x1d, 0x6b, 0xdd, 0xda, 0x5c, 0xec, 0x34, 0x0b, 0x8d, 0xff, 0x3f, 0xa5, 0x3c, 0x79, 0x44, 0xca,
	0x65, 0x12, 0x18, 0xd8, 0xee, 0xa0, 0x95, 0x30, 0x61, 0x20, 0x54, 0x4f, 0x8e, 0x75, 0x3d, 0x16,
	0x39, 0x73, 0xa5, 0xa2, 0x5d, 0x68, 0xbc, 0x66, 0x14, 0x33, 0x04, 0x12, 0x2c, 0x99, 0x95, 0x32,
	0x69, 0x3f, 0xb2, 0x5f, 0xa3, 0x25, 0xc5, 0x38, 0xf4, 0x98, 0xe8, 0xbd, 0x91, 0x69, 0x08, 0x4e,
	0x7d, 0xdd, 0xda, 0x5c, 0xde, 0x71, 0xbd, 0x2b, 0x0d, 0x78, 0x2f, 0x18, 0x87, 0x7d, 0xf1, 0x74,
	0xcc, 0xea, 0x38, 0x85, 0xc6, 0xab, 0x26, 0xe1, 0x92, 0x9c, 0x04, 0x0d, 0xf5, 0x93, 0x66, 0xef,
	0xa1, 0x85, 0x4c, 0x1e, 0x8f, 0x6d, 0xff, 0x5b, 0xb7, 0x36, 0x1b, 0x3b, 0x77, 0x3d, 0xd3, 0x97,
	0x37, 0xee, 0xeb, 0xc2, 0x78, 0x57, 0x32, 0xd1, 0x69, 0x15, 0x1a, 0x2f, 0x19, 0x47, 0x23, 0x21,
	0x41, 0xa5, 0xb5, 0x0f, 0x51, 0x23, 0x82, 0x4c, 0x31, 0x41, 0x15, 0x93, 0xc2, 0x99, 0xff, 0x9d,
	0xd5, 0x5a, 0xa1, 0xb1, 0x6d, 0xac, 0xa6, 0x74, 0x24, 0x98, 0x76, 0x21, 0xa3, 0x3a, 0x6a, 0x99,
	0xe6, 0xbb, 0xe5, 0x67, 0xfe, 0x6b, 0xd5, 0xdf, 0xbb, 0x54, 0xfd, 0xe2, 0x4d, 0xf7, 0x6b, 0x7f,
	0xb4, 0x50, 0x93, 0xd3, 0x21, 0xe3, 0xc7, 0xbc, 0x97, 0x25, 0x6c, 0x30, 0xa0, 0x31, 0x38, 0x0b,
	0xe5, 0x56, 0x5e, 0x9e, 0x69, 0x5c, 0xfb, 0xaa, 0xf1, 0x46, 0xcc, 0xd4, 0xdb, 0xe3, 0xbe, 0x17,
	0x4a, 0xee, 0x57, 0xf7, 0xc8, 0x3c, 0xb6, 0xb2, 0xe8, 0xc8, 0x57, 0xa7, 0x03, 0xc8, 0xbc, 0x3d,
	0x08, 0x73, 0x8d, 0x1b, 0x5d, 0x3a, 0x3c, 0xac, 0x4c, 0x0a, 0x8d, 0xef, 0x98, 0xf0, 0x59, 0x7b,
	0x12, 0xac, 0x54, 0x4b, 0x13, 0x2e, 0xf9, 0x80, 0x96, 0xbb, 0x59, 0xbc, 0x4b, 0x45, 0x08, 0xc9,
	0x8d, 0xff, 0x61, 0xf2, 0xb9, 0x8e, 0xda, 0x17, 0xf1, 0x01, 0x0c, 0x12, 0x1a, 0xc2, 0x1f, 0xdc,
	0xf3, 0x77, 0xc8, 0x91, 0x29, 0x8b, 0x99, 0xa0, 0x49, 0xef, 0xfa, 0x3d, 0x3d, 0xcc, 0x35, 0x6e,
	0x1d, 0xa4, 0x2c, 0xde, 0x9d, 0xce, 0x2f, 0x34, 0xc6, 0x95, 0xdf, 0x2f, 0xe4, 0x24, 0xb8, 0x3d,
	0x81, 0x2e, 0x29, 0x6d, 0x8a, 0x6e, 0x09, 0x38, 0xb9, 0x92, 0x56, 0x2f, 0xd3, 0x76, 0x72, 0x8d,
	0x9b, 0xcf, 0xe1, 0x64, 0x36, 0xac, 0x6d, 0xc2, 0xae, 0x11, 0x92, 0xa0, 0x29, 0x66, 0xf8, 0x7f,
	0xf1, 0x6c, 0xe8, 0x3c, 0x39, 0xcb, 0x5d, 0xeb, 0x3c, 0x77, 0xad, 0x6f, 0xb9, 0x6b, 0x7d, 0x1a,
	0xb9, 0xb5, 0xf3, 0x91, 0x5b, 0xfb, 0x32, 0x72, 0x6b, 0xaf, 0xee, 0x4f, 0x1d, 0x59, 0xd8, 0xe2,
	0x52, 0xc0, 0xa9, 0x0f, 0x7c, 0x2b, 0x81, 0x28, 0x86, 0xd4, 0x1f, 0x4e, 0x66, 0x7d, 0x79, 0x76,
	0xfb, 0x0b, 0xe5, 0x8c, 0x7f, 0xf0, 0x23, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xe7, 0x28, 0x77, 0x6a,
	0x06, 0x00, 0x00,
}

func (m *MsgAddLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Destination != nil {
		{
			size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMarketOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarketOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarketOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxSlippage.Size()
		i -= size
		if _, err := m.MaxSlippage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Destination != nil {
		{
			size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x22
	}
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelReplaceLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelReplaceLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelReplaceLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Destination != nil {
		{
			size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewClientOrderId) > 0 {
		i -= len(m.NewClientOrderId)
		copy(dAtA[i:], m.NewClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewClientOrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrigClientOrderId) > 0 {
		i -= len(m.OrigClientOrderId)
		copy(dAtA[i:], m.OrigClientOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrigClientOrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddMarketOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxSlippage.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCancelOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelReplaceLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrigClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewClientOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &types.Coin{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &types.Coin{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarketOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarketOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarketOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &types.Coin{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlippage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSlippage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelReplaceLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelReplaceLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelReplaceLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &types.Coin{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &types.Coin{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
