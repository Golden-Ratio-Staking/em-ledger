// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: em/issuer/v1beta1/tx.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgIncreaseMintable struct {
	Issuer            string                                   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty" yaml:"issuer"`
	LiquidityProvider string                                   `protobuf:"bytes,2,opt,name=liquidity_provider,json=liquidityProvider,proto3" json:"liquidity_provider,omitempty" yaml:"liquidity_provider"`
	MintableIncrease  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *MsgIncreaseMintable) Reset()         { *m = MsgIncreaseMintable{} }
func (m *MsgIncreaseMintable) String() string { return proto.CompactTextString(m) }
func (*MsgIncreaseMintable) ProtoMessage()    {}
func (*MsgIncreaseMintable) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e78b5b527cb893a, []int{0}
}
func (m *MsgIncreaseMintable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncreaseMintable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncreaseMintable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncreaseMintable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncreaseMintable.Merge(m, src)
}
func (m *MsgIncreaseMintable) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncreaseMintable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncreaseMintable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncreaseMintable proto.InternalMessageInfo

func (m *MsgIncreaseMintable) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgIncreaseMintable) GetLiquidityProvider() string {
	if m != nil {
		return m.LiquidityProvider
	}
	return ""
}

func (m *MsgIncreaseMintable) GetMintableIncrease() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MintableIncrease
	}
	return nil
}

type MsgDecreaseMintable struct {
	Issuer            string                                   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty" yaml:"issuer"`
	LiquidityProvider string                                   `protobuf:"bytes,2,opt,name=liquidity_provider,json=liquidityProvider,proto3" json:"liquidity_provider,omitempty" yaml:"liquidity_provider"`
	MintableDecrease  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *MsgDecreaseMintable) Reset()         { *m = MsgDecreaseMintable{} }
func (m *MsgDecreaseMintable) String() string { return proto.CompactTextString(m) }
func (*MsgDecreaseMintable) ProtoMessage()    {}
func (*MsgDecreaseMintable) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e78b5b527cb893a, []int{1}
}
func (m *MsgDecreaseMintable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecreaseMintable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecreaseMintable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecreaseMintable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecreaseMintable.Merge(m, src)
}
func (m *MsgDecreaseMintable) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecreaseMintable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecreaseMintable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecreaseMintable proto.InternalMessageInfo

func (m *MsgDecreaseMintable) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgDecreaseMintable) GetLiquidityProvider() string {
	if m != nil {
		return m.LiquidityProvider
	}
	return ""
}

func (m *MsgDecreaseMintable) GetMintableDecrease() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MintableDecrease
	}
	return nil
}

type MsgRevokeLiquidityProvider struct {
	Issuer            string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty" yaml:"issuer"`
	LiquidityProvider string `protobuf:"bytes,2,opt,name=liquidity_provider,json=liquidityProvider,proto3" json:"liquidity_provider,omitempty" yaml:"liquidity_provider"`
}

func (m *MsgRevokeLiquidityProvider) Reset()         { *m = MsgRevokeLiquidityProvider{} }
func (m *MsgRevokeLiquidityProvider) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeLiquidityProvider) ProtoMessage()    {}
func (*MsgRevokeLiquidityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e78b5b527cb893a, []int{2}
}
func (m *MsgRevokeLiquidityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeLiquidityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeLiquidityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeLiquidityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeLiquidityProvider.Merge(m, src)
}
func (m *MsgRevokeLiquidityProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeLiquidityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeLiquidityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeLiquidityProvider proto.InternalMessageInfo

func (m *MsgRevokeLiquidityProvider) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgRevokeLiquidityProvider) GetLiquidityProvider() string {
	if m != nil {
		return m.LiquidityProvider
	}
	return ""
}

type MsgSetInflation struct {
	Issuer        string                                 `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty" yaml:"issuer"`
	Denom         string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	InflationRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=inflation_rate,json=inflationRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation_rate" yaml:"inflation_rate"`
}

func (m *MsgSetInflation) Reset()         { *m = MsgSetInflation{} }
func (m *MsgSetInflation) String() string { return proto.CompactTextString(m) }
func (*MsgSetInflation) ProtoMessage()    {}
func (*MsgSetInflation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e78b5b527cb893a, []int{3}
}
func (m *MsgSetInflation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetInflation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetInflation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetInflation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetInflation.Merge(m, src)
}
func (m *MsgSetInflation) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetInflation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetInflation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetInflation proto.InternalMessageInfo

func (m *MsgSetInflation) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgSetInflation) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgIncreaseMintable)(nil), "em.issuer.v1beta1.MsgIncreaseMintable")
	proto.RegisterType((*MsgDecreaseMintable)(nil), "em.issuer.v1beta1.MsgDecreaseMintable")
	proto.RegisterType((*MsgRevokeLiquidityProvider)(nil), "em.issuer.v1beta1.MsgRevokeLiquidityProvider")
	proto.RegisterType((*MsgSetInflation)(nil), "em.issuer.v1beta1.MsgSetInflation")
}

func init() { proto.RegisterFile("em/issuer/v1beta1/tx.proto", fileDescriptor_3e78b5b527cb893a) }

var fileDescriptor_3e78b5b527cb893a = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0x41, 0x8b, 0xd3, 0x40,
	0x18, 0xed, 0x6c, 0xb1, 0xe0, 0xe8, 0xea, 0x36, 0x2a, 0x74, 0x0b, 0x66, 0x96, 0x39, 0x2c, 0x15,
	0x69, 0x86, 0xd5, 0x9b, 0xc7, 0xba, 0x22, 0x0b, 0x5b, 0x90, 0x88, 0x17, 0x2f, 0xcb, 0x24, 0xf9,
	0x8c, 0xc3, 0x66, 0x66, 0x6a, 0x66, 0x5a, 0xb6, 0xff, 0xc0, 0xa3, 0x17, 0x0f, 0xfe, 0x05, 0x7f,
	0xc9, 0x1e, 0xf7, 0xe0, 0x41, 0x3c, 0x44, 0x49, 0xff, 0x41, 0x7e, 0x81, 0x34, 0x93, 0x54, 0x65,
	0x2f, 0x0a, 0x82, 0xe0, 0x29, 0xe1, 0xbd, 0xef, 0x7b, 0xdf, 0x7b, 0x0f, 0x12, 0x3c, 0x04, 0xc9,
	0x84, 0x31, 0x73, 0xc8, 0xd9, 0xe2, 0x20, 0x02, 0xcb, 0x0f, 0x98, 0x3d, 0x0b, 0x66, 0xb9, 0xb6,
	0xda, 0xeb, 0x83, 0x0c, 0x1c, 0x17, 0x34, 0xdc, 0xf0, 0x76, 0xaa, 0x53, 0x5d, 0xb3, 0x6c, 0xfd,
	0xe6, 0x06, 0x87, 0x7e, 0xac, 0x8d, 0xd4, 0x86, 0x45, 0xdc, 0xc0, 0x46, 0x26, 0xd6, 0x42, 0x39,
	0x9e, 0x7e, 0xd8, 0xc2, 0xb7, 0xa6, 0x26, 0x3d, 0x52, 0x71, 0x0e, 0xdc, 0xc0, 0x54, 0x28, 0xcb,
	0xa3, 0x0c, 0xbc, 0x7b, 0xb8, 0xe7, 0xf4, 0x07, 0x68, 0x0f, 0x8d, 0xae, 0x4e, 0xfa, 0x55, 0x41,
	0xb6, 0x97, 0x5c, 0x66, 0x8f, 0xa8, 0xc3, 0x69, 0xd8, 0x0c, 0x78, 0xc7, 0xd8, 0xcb, 0xc4, 0x9b,
	0xb9, 0x48, 0x84, 0x5d, 0x9e, 0xcc, 0x72, 0xbd, 0x10, 0x09, 0xe4, 0x83, 0xad, 0x7a, 0xed, 0x6e,
	0x55, 0x90, 0x5d, 0xb7, 0x76, 0x79, 0x86, 0x86, 0xfd, 0x0d, 0xf8, 0xac, 0xc1, 0xbc, 0xb7, 0x08,
	0xf7, 0xb8, 0xd4, 0x73, 0x65, 0x07, 0xdd, 0xbd, 0xee, 0xe8, 0xda, 0x83, 0xdd, 0xc0, 0x45, 0x08,
	0xd6, 0x11, 0xda, 0xb4, 0xc1, 0x63, 0x2d, 0xd4, 0xe4, 0xc5, 0x79, 0x41, 0x3a, 0x65, 0x41, 0x76,
	0x5a, 0xdb, 0x6d, 0x8c, 0x1f, 0x66, 0x9d, 0x14, 0xfd, 0xf8, 0x95, 0x8c, 0x52, 0x61, 0x5f, 0xcf,
	0xa3, 0x20, 0xd6, 0x92, 0x35, 0xa5, 0xb8, 0xc7, 0xd8, 0x24, 0xa7, 0xcc, 0x2e, 0x67, 0x60, 0x6a,
	0x55, 0x13, 0x36, 0xf7, 0xdb, 0x6e, 0x0e, 0xe1, 0xbf, 0xe8, 0xa6, 0x8d, 0xf1, 0x77, 0xba, 0x79,
	0x8f, 0xf0, 0x70, 0x6a, 0xd2, 0x10, 0x16, 0xfa, 0x14, 0x8e, 0x2f, 0x39, 0xfd, 0x57, 0x15, 0xd1,
	0x4f, 0x08, 0xdf, 0x9c, 0x9a, 0xf4, 0x39, 0xd8, 0x23, 0xf5, 0x2a, 0xe3, 0x56, 0x68, 0xf5, 0x27,
	0x66, 0xf6, 0xf1, 0x95, 0x04, 0x94, 0x96, 0xcd, 0xfd, 0x9d, 0xaa, 0x20, 0xd7, 0xdd, 0x64, 0x0d,
	0xd3, 0xd0, 0xd1, 0x9e, 0xc2, 0x37, 0x44, 0xab, 0x7f, 0x92, 0x73, 0x0b, 0x83, 0x6e, 0xbd, 0xf0,
	0x74, 0xdd, 0xfa, 0x97, 0x82, 0xec, 0xff, 0x46, 0xa1, 0x87, 0x10, 0x57, 0x05, 0xb9, 0xd3, 0x18,
	0xf9, 0x45, 0x8d, 0x86, 0xdb, 0x1b, 0x20, 0xe4, 0x16, 0x26, 0x4f, 0xce, 0x4b, 0x1f, 0x5d, 0x94,
	0x3e, 0xfa, 0x56, 0xfa, 0xe8, 0xdd, 0xca, 0xef, 0x5c, 0xac, 0xfc, 0xce, 0xe7, 0x95, 0xdf, 0x79,
	0x79, 0xff, 0xa7, 0x4b, 0x30, 0x96, 0x5a, 0xc1, 0x92, 0x81, 0x1c, 0x67, 0x90, 0xa4, 0x90, 0xb3,
	0xb3, 0xf6, 0x0f, 0x52, 0x9f, 0x8c, 0x7a, 0xf5, 0x47, 0xff, 0xf0, 0x7b, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf5, 0xc8, 0x95, 0x77, 0x5b, 0x04, 0x00, 0x00,
}

func (m *MsgIncreaseMintable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncreaseMintable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncreaseMintable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintableIncrease) > 0 {
		for iNdEx := len(m.MintableIncrease) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintableIncrease[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LiquidityProvider) > 0 {
		i -= len(m.LiquidityProvider)
		copy(dAtA[i:], m.LiquidityProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LiquidityProvider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDecreaseMintable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecreaseMintable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecreaseMintable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintableDecrease) > 0 {
		for iNdEx := len(m.MintableDecrease) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintableDecrease[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LiquidityProvider) > 0 {
		i -= len(m.LiquidityProvider)
		copy(dAtA[i:], m.LiquidityProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LiquidityProvider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeLiquidityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeLiquidityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeLiquidityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidityProvider) > 0 {
		i -= len(m.LiquidityProvider)
		copy(dAtA[i:], m.LiquidityProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LiquidityProvider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetInflation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetInflation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetInflation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InflationRate.Size()
		i -= size
		if _, err := m.InflationRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgIncreaseMintable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LiquidityProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MintableIncrease) > 0 {
		for _, e := range m.MintableIncrease {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDecreaseMintable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LiquidityProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MintableDecrease) > 0 {
		for _, e := range m.MintableDecrease {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRevokeLiquidityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LiquidityProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetInflation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InflationRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgIncreaseMintable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncreaseMintable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncreaseMintable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintableIncrease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintableIncrease = append(m.MintableIncrease, types.Coin{})
			if err := m.MintableIncrease[len(m.MintableIncrease)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecreaseMintable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecreaseMintable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecreaseMintable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintableDecrease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintableDecrease = append(m.MintableDecrease, types.Coin{})
			if err := m.MintableDecrease[len(m.MintableDecrease)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeLiquidityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeLiquidityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeLiquidityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetInflation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetInflation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetInflation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
